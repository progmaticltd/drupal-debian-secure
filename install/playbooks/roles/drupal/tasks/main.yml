---

- name: Install the Debian drupal package
  apt:
    name: '{{ drupal_pkgs }}'
    state: latest

- name: Initialise the database
  include_tasks: db.yml

- name: Create the directory for Drush
  file:
    path: /usr/local/lib/drush7
    state: directory

- name: Install Drush using composer
  shell: >-
    composer require drush/drush:7.x
  args:
    chdir: /usr/local/lib/drush7
    creates: /usr/local/lib/drush7/composer.json

- name: Create the symbolic link
  file:
    src: /usr/local/lib/drush7/vendor/drush/drush/drush
    dest: /usr/local/sbin/drush
    state: link

- name: Deploy apache frontend configuration
  template:
    src: '{{ file }}'
    dest: '/etc/drupal/7/sites/default/{{ file }}'
  with_items:
    - settings.php
    - dbconfig.php
    - baseurl.php
  loop_control:
    loop_var: file

- name: Initialise the drupal admin password parameters
  set_fact:
    admin_password_path: "{{ playbook_dir }}/../../backup/{{ network.domain }}/drupal/admin.pwd"
    admin_password_params: "chars=ascii_letters,digits length=16"

- name: Create the drupal admin account password
  set_fact:
    admin_password: '{{ lookup("password", admin_password_path + " " + admin_password_params) }}'

- name: Create a directory for Drupal logs
  file:
    path: /var/log/drupal
    state: directory

- name: Install Drupal automatically with Drush
  shell: >-
    drush site-install -y standard
    --locale=en-GB
    --account-name=admin
    --account-pass={{ admin_password }}
    --account-mail="admin@{{ network.domain }}"
    --site-mail="admin@{{ network.domain }}"
    --site-name="{{ drupal.site_name }}"
    --verbose
    --clean-url
    --db-url="pgsql://drupal:{{ drupal_db_password }}@localhost/drupal"
    | sed "s/{{ admin_password }}/*******/g"
    >/var/log/drupal/install.log 2>&1
  args:
    chdir: /usr/share/drupal7/
    creates: /var/log/drupal/install.log

- name: Download the required modules
  shell: >-
    drush dl {{ module }}
  args:
    chdir: /usr/share/drupal7/
    creates: '/usr/share/drupal7/sites/default/modules/{{ module }}'
  with_items:
    - '{{ drupal.modules.install | default([]) }}'
  loop_control:
    loop_var: module

- name: Enable the required modules
  shell: >-
    drush en -y {{ module }}
    >/var/log/drupal/module-{{ module }}-install.log
    2>&1
  args:
    chdir: /usr/share/drupal7/
    creates: '/var/log/drupal/module-{{ module }}-install.log'
  with_items:
    - '{{ drupal.modules.install | default([]) }}'
  loop_control:
    loop_var: module

- name: Uninstall the modules in the uninstall list
  shell: >-
    drush dis -y {{ module }}
    >/var/log/drupal/module-{{ module }}-uninstall.log
    2>&1
  args:
    chdir: /usr/share/drupal7/
    creates: '/var/log/drupal/module-{{ module }}-uninstall.log'
  with_items:
    - '{{ drupal.modules.uninstall | default([]) }}'
  loop_control:
    loop_var: module

- name: Deploy CRS rules for Drupal
  notify: Restart Apache
  template:
    src: crs-rules-drupal.conf
    dest: /etc/modsecurity/crs/rules-drupal.conf

- name: Deploy apache frontend configuration
  notify: Restart Apache
  template:
    src: apache2-front.conf
    dest: '/etc/apache2/sites-available/{{ drupal.subdomain }}.{{ network.domain }}.conf'

- name: Activate apache frontend configuration
  notify: Restart Apache
  file:
    src: '/etc/apache2/sites-available/{{ drupal.subdomain }}.{{ network.domain }}.conf'
    dest: '/etc/apache2/sites-enabled/{{ drupal.subdomain }}.{{ network.domain }}.conf'
    state: link

- name: Deploy nginx frontend configuration
  notify: Restart Nginx
  template:
    src: nginx-front.conf
    dest: '/etc/nginx/sites-available/{{ drupal.subdomain }}.{{ network.domain }}.conf'

- name: Activate nginx frontend configuration
  notify: Restart Nginx
  file:
    src: '/etc/nginx/sites-available/{{ drupal.subdomain }}.{{ network.domain }}.conf'
    dest: '/etc/nginx/sites-enabled/{{ drupal.subdomain }}.{{ network.domain }}.conf'
    state: link
